{
  
    
        "post0": {
            "title": "Charting a Marketing Acquisition Funnel",
            "content": "%matplotlib inline import pandas as pd from collections import OrderedDict import matplotlib.pyplot as plt import matplotlib.patches as patches import seaborn as sns sns.set_style(&#39;whitegrid&#39;) . # start with some dummy data df = pd.DataFrame({ &#39;date&#39;:[&#39;2019-08-01&#39;,&#39;2019-09-01&#39;,&#39;2019-10-01&#39;,&#39;2019-11-01&#39;,&#39;2019-12-01&#39;,&#39;2020-01-01&#39;,&#39;2020-02-01&#39;,&#39;2020-03-01&#39;], &#39;website_traffic&#39;:[330771,358652,407319,395589,397580,415680,483755,581999], &#39;new_accounts&#39;:[15720,15900,16999,17780,16568,18203,22763,32579], &#39;account_verify&#39;:[14670,14884,15841,16141,15267,16344,20653,29365], &#39;product_activated&#39;:[13812,13909,14988,15212,14314,15285,19498,27962], &#39;paid_conversion&#39;:[1005,1011,9244,1083,1051,1151,1560,2173], &#39;some_other_metric&#39;:[13270,13678,14732,15023,14092,15060,19086,26436] }) df.head() . date website_traffic new_accounts account_verify product_activated paid_conversion some_other_metric . 0 2019-08-01 | 330771 | 15720 | 14670 | 13812 | 1005 | 13270 | . 1 2019-09-01 | 358652 | 15900 | 14884 | 13909 | 1011 | 13678 | . 2 2019-10-01 | 407319 | 16999 | 15841 | 14988 | 9244 | 14732 | . 3 2019-11-01 | 395589 | 17780 | 16141 | 15212 | 1083 | 15023 | . 4 2019-12-01 | 397580 | 16568 | 15267 | 14314 | 1051 | 14092 | . df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;],format=&#39;%Y-%m-%d&#39;) . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 8 entries, 0 to 7 Data columns (total 7 columns): # Column Non-Null Count Dtype -- -- 0 date 8 non-null datetime64[ns] 1 website_traffic 8 non-null int64 2 new_accounts 8 non-null int64 3 account_verify 8 non-null int64 4 product_activated 8 non-null int64 5 paid_conversion 8 non-null int64 6 some_other_metric 8 non-null int64 dtypes: datetime64[ns](1), int64(6) memory usage: 576.0 bytes . # define only the KPIs we want to see (since there are cases where other metrics are present in the dataframe) all_kpis = [&#39;website_traffic&#39;,&#39;new_accounts&#39;,&#39;account_verify&#39;,&#39;product_activated&#39;,&#39;paid_conversion&#39;] . all_names = tuple([x.replace(&#39;_&#39;,&#39; n&#39;).title() for x in all_kpis]) . def get_it_in_order(df,mask,month): &quot;&quot;&quot; Biggest assumption: there is a &#39;date&#39; column (not index!) in the dataframe that is *literally named* &#39;date&#39; Accepts entire dataframe Supply a column mask Supply a list of column names &quot;&quot;&quot; kpis = OrderedDict() frame_2_dict = df.set_index(&#39;date&#39;).loc[month,idx[mask]].to_dict() for i in mask: kpis[i] = frame_2_dict[i] return kpis . def add_arrow(x_adjust,y_adjust,ratio): bbox_props = dict(boxstyle=&quot;rarrow,pad=0.5&quot;, facecolor=&quot;grey&quot;, edgecolor=&quot;grey&quot;, alpha=0.75, lw=1) return plt.text(x_adjust,y_adjust,&#39;{0:.1f}%&#39;.format(ratio * 100), verticalalignment=&#39;center&#39;, horizontalalignment=&#39;left&#39;, fontsize=16, weight=&#39;black&#39;, color=&#39;white&#39;, bbox=bbox_props) . def plot_acquisition_funnel(df, month, names, metrics): data = get_it_in_order(df, metrics, month) count = range(len(data)) fig, ax = plt.subplots(figsize=(10, 6)) rects = ax.bar(count, data.values(), width=.5, align=&#39;center&#39;, color=sns.color_palette(&quot;Blues&quot;, len(data))) plt.xticks(count, names) plt.ylim(bottom=0, top=data[metrics[1]]*2) plt.title(&#39;{0} Acquisition Funnel&#39;.format(month), fontsize=16) plt.tick_params(labelsize=16) add_arrow(0.27, data[metrics[3]]/1.7, data[metrics[1]]/data[metrics[0]]) add_arrow(1.27, data[metrics[3]]/1.7, data[metrics[2]]/data[metrics[1]]) add_arrow(2.27, data[metrics[3]]/1.7, data[metrics[3]]/data[metrics[2]]) add_arrow(3.27, data[metrics[3]]/1.7, data[metrics[4]]/data[metrics[3]]) for rect, val in zip(rects,data.values()): height = rect.get_height() if height &gt; 250: label_color = &#39;grey&#39; else: label_color = &#39;white&#39; ax.text(rect.get_x() + rect.get_width()/2,250,&#39;{:,}&#39;.format(val),ha=&#39;center&#39;, va=&#39;bottom&#39;,fontsize=12,weight=&#39;bold&#39;,color=label_color) plt.grid(False) plt.show() . plot_acquisition_funnel(df,&#39;2019-08-01&#39;,all_names,all_kpis) .",
            "url": "http://blog.measureallthethin.gs/2020/05/02/charting-a-marketing-funnel.html",
            "relUrl": "/2020/05/02/charting-a-marketing-funnel.html",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "http://blog.measureallthethin.gs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "http://blog.measureallthethin.gs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "http://blog.measureallthethin.gs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "http://blog.measureallthethin.gs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}